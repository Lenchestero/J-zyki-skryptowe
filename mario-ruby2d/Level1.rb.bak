require 'ruby2d'

set title: "Platform Jumper"
set width: 1280, height: 720

$current_scene = :menu
@background = nil
@texts = []
@platforms= []
@moving_platforms = []
@velocity_y = 0
@gravity = 0.5
@jumping = false
@speed = 4
@keys_held = {}

def draw_menu
	clear
	@background = Image.new('assets/background.png', x: 0, y: 0, width: 1280, height: 720)

	title = Text.new(
	"PLATFORM JUMPER",
	x: Window.width / 2, 
	y: Window.height / 2 - 100,
	size: 64,
	color: 'white',
	font: 'assets/Regular.ttf')
	title.x -= title.width / 2

	controls = Text.new(
	"Controls: Arrows to move",
	x: Window.width / 2,
	y: Window.height / 2 - 30,
	size: 20,
	color: 'white',
	font: 'assets/Regular.ttf')
	controls.x -= controls.width / 2

	subtitle = Text.new(
	"Press ENTER to start game",
	x: Window.width / 2, 
	y: Window.height / 2 + 50,
	size: 20,
	color: 'white',
	font: 'assets/Regular.ttf')
	subtitle.x -= subtitle.width / 2

	@texts = [title, controls, subtitle]
end

def add_platform(ismovable:,length:,height:,position:)
	unless ismovable
		length.times do |x|
			h = position + (x*64)
			tile = Image.new('assets/Tile_02.png', x: h, y: height, width: 64, height: 64)
			@platforms << {Image: tile, x: position, y: height, length: length, width: length * 64, height: 64 }
		end
	else
		moving_tile= {
			image: Image.new('assets/moving_tile.png', x: position, y: height, width: 256, height: 64),
			speed: 1,
			min_x: position - 200,
			max_x: position + 200,
			direction: 1}
		@moving_platforms << moving_tile
	end
end

def move_the_platforms
	@moving_platforms.each do |platform|
		platform[:image].x += platform[:speed] * platform[:direction]
		if platform[:image].x >= platform[:max_x] || platform[:image].x <= platform[:min_x]
			platform[:direction] *= -1
		end
	end
end



def start_game
	clear
	@platforms.clear
	@moving_platforms.clear
	@background = Image.new('assets/background.png', x: 0, y: 0, width: 1280, height: 720)
	add_platform(ismovable: false, length: 6, height: 560, position: 20)
	add_platform(ismovable: false, length: 7, height: 500, position: 450)
	add_platform(ismovable: false, length: 4, height: 300, position: 100)
	add_platform(ismovable: false, length: 4, height: 600, position: 1000)
	add_platform(ismovable: true, length: 4, height: 200, position: 600)
	@dude = Sprite.new('assets/spritesheet.png', clip_width: 128, clip_height: 128, x: 100, y: 432, time: 100, animations: { idle: 25..27, kick: 1..5, jump: 6..12, run: 13..24})
	@dude.play animation: :idle, loop: true	
	@player_state = :idle
	@dude.width = 128
	@dude.height = 128
	@jumping = false
	velocity_y = 0
	
end

def death
	clear
	@background = Image.new('assets/background.png', x: 0, y: 0, width: 1280, height: 720)
	@background.color = [1, 0, 0, 0.5]
	title = Text.new(
	"You died",
	x: Window.width / 2, 
	y: Window.height / 2 - 100,
	size: 64,
	color: 'white',
	font: 'assets/Regular.ttf')
	title.x -= title.width / 2

	subtitle = Text.new(
	"Press ENTER to restart",
	x: Window.width / 2, 
	y: Window.height / 2 + 50,
	size: 20,
	color: 'white',
	font: 'assets/Regular.ttf')
	subtitle.x -= subtitle.width / 2
end

def player_on_ground?
	@platforms.any? do |platform|
		@dude.x < platform[:x] + platform[:width] - 70 &&
		@dude.x + @dude.width > platform[:x] + 70 &&
		@dude.y + @dude.height <= platform[:y] + 5 &&
		@dude.y + @dude.height >= platform[:y] - 5
	end ||
	@moving_platforms.any? do |platform|
		p = platform[:image]
		@dude.x < p.x + p.width - 70 &&
		@dude.x + @dude.width > p.x + 70 &&
		@dude.y + @dude.height <= p.y + 5 &&
		@dude.y + @dude.height >= p.y - 5
	end
end

on :key_down do |event|
	case $current_scene
		when :menu
		if event.key == "return"
			$current_scene = :level1
			start_game
		end
		when :death
		if event.key == "return"
			$current_scene = :menu
			draw_menu
		end
		when :level1
		@keys_held[event.key] = true
		case event.key
			when 'right'
				@facing_left = false
				@dude.x += @speed
				@dude.play animation: :run, loop: false do
				@dude.play animation: :idle, loop: true
				end
			when 'left'
				@facing_left = true
				@dude.x -= @speed
				@dude.play animation: :run, loop: false, flip: :horizontal do
				@dude.play animation: :idle, loop: true
				end
			when 'space'
			puts("Jump")
				if player_on_ground?
					@velocity_y = -12
					@jumping = true
					if @facing_left == false
						@dude.play animation: :jump, loop: false do
						@dude.play animation: :idle, loop: true
						end
					else
						@dude.play animation: :jump, loop: false, flip: :horizontal do
						@dude.play animation: :idle, loop: true, flip: :horizontal
						end
					end
				end
			when 'f'
				if @facing_left == false 
					@dude.play animation: :kick, loop: false do
					@dude.play animation: :idle, loop: true
					end
				else
					@dude.play animation: :kick, loop: false, flip: :horizontal do
					@dude.play animation: :idle, loop: true, flip: :horizontal
					end
				end
		end
	end
end

on :key_up do |event|
  @keys_held[event.key] = false
end

update do
	if $current_scene == :level1
		if @dude.y > Window.height
			$current_scene = :death
			death
		end
		move_the_platforms
		if @keys_held['right']
			@dude.x += @speed
			@facing_left = false
			unless @jumping
				@dude.play animation: :run, loop: true
			end
		elsif @keys_held['left']
			@dude.x -= @speed
			@facing_left = true
			unless @jumping
				@dude.play animation: :run, loop: true, flip: :horizontal
			end
		else
			unless @jumping
				@dude.play animation: :idle, loop: true
			end
		end
		@dude.y += @velocity_y
		@velocity_y += @gravity
		on_ground = false
		@platforms.each do |platform|
			puts 
			if @dude.x < platform[:x] + platform[:width] - 70 && @dude.x + @dude.width > platform[:x] + 70 && @dude.y  < platform[:y] + platform[:height] - 25 && @dude.y + @dude.height > platform[:y]
				if @dude.y <= platform[:y]
					@dude.y = platform[:y] - @dude.height
					@velocity_y = 0
					@jumping = false
					on_ground = true
				else
					@velocity_y = 5
				end
			end
		end
		@moving_platforms.each do |platform|
			p = platform[:image]
			if @dude.x < p.x + p.width - 70 && @dude.x + @dude.width > p.x + 70 &&@dude.y < p.y + p.height && @dude.y + @dude.height > p.y
				if @dude.y + 60 <= p.y 
					@dude.y = p.y - @dude.height
					@velocity_y = 0
					@jumping = false
					on_ground = true
					@dude.x += platform[:speed] * 2 * platform[:direction]
				else
					@velocity_y = 5
				end
			end
		end
		@jumping = !on_ground
	end
end

draw_menu


show